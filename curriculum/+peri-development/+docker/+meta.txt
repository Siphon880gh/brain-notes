Why Docker
========

Some software are packaged with a Docker image of its compatible Linux OS and the dependencies, guarantees minimal setup to run the software.

For example, this following OCR tool is a Docker image file. When run, there's another environment aka Container that has another linux distribution, some depdencies for the OCR cli tool, the OCR cli tool, and it runs bash commands on the OCR cli.
Whatever commands does to the container file system gets reflected to your own OS file system.
https://github.com/yardstick17/image_text_reader

Take a look on how to load its OS container, the dependencies, and the OCR CLI tool all wrapped in a container and run shell commands:
```
docker run -e LC_ALL=C.UTF-8 -it yardstick17/image-text-reader  bash -c "PYTHONPATH='.' python3 read_image.py read_text_from_local_image -f images/sample_image.jpg"
```

"In practice this is used to make applications portable and maintainable - a container has an application and it's required dependencies (and its OS)."


Installation
========

Have Docker installed. The software installs both GUI and cli. With the above command, docker will load the image as a container. That container is another Linux with the required dependencies for the OCR cli tool, has the OCR cli tool itself, and the Linux runs the bash commands of the OCR cli tool. Files created in this container's shell gets reflected back to our own OS file system.

Software:
https://hub.docker.com/editions/community/docker-ce-desktop-mac/

Tutorial
========
Docker CLI is enabled after you install Docker GUI

# Load container:
Get Alpine Linux distro container from a git repository
```
docker run --name repo alpine/git clone https://github.com/docker/getting-started.git
```
That will load your directories into an alpine linux distro:
https://hub.docker.com/r/alpine/git

# Build image
A Docker image is a private file system just for your container. It provides all the files and code your container needs.
```
docker build -t docker101tutorial .
```
# Run created image
Start a container based on the image you built in the previous step. Running a container launches your application with private resources, securely isolated from the rest of your machine.
```
docker run -d -p 80:80 --name docker-tutorial docker101tutorial
```

Then the image will appear on the docker GUI dashboard too so you can easily manage your images. With Docker account you can share your own images